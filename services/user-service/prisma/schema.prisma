// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Основная модель пользователя
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  phone             String?  @unique
  passwordHash      String
  role              UserRole @default(CUSTOMER)
  isActive          Boolean  @default(true)
  isVerified        Boolean  @default(false)
  emailVerified     Boolean  @default(false)
  phoneVerified     Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  
  // Отношения
  profile           UserProfile?
  sessions          UserSession[]
  verifications     UserVerification[]
  orders            Order[]           // Связь с order-service
  deliveries        Delivery[]        // Связь с logistics-service
  
  @@map("users")
}

// Расширенный профиль пользователя
model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  firstName         String?
  lastName          String?
  middleName        String?
  birthDate         DateTime?
  gender            Gender?
  avatar            String?
  bio               String?
  companyName       String?
  companyPosition   String?
  companyAddress    String?
  companyPhone      String?
  companyWebsite    String?
  taxId             String?
  bankAccount       String?
  preferences       Json?    // JSON с настройками пользователя
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Отношения
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// Сессии пользователей
model UserSession {
  id                String   @id @default(cuid())
  userId            String
  deviceId          String
  deviceType        DeviceType
  deviceInfo        Json?    // JSON с информацией об устройстве
  ipAddress         String?
  userAgent         String?
  refreshToken      String   @unique
  accessToken       String   @unique
  expiresAt         DateTime
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Отношения
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

// Верификация пользователей
model UserVerification {
  id                String   @id @default(cuid())
  userId            String
  type              VerificationType
  code              String
  expiresAt         DateTime
  isUsed            Boolean  @default(false)
  attempts          Int      @default(0)
  maxAttempts       Int      @default(3)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Отношения
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_verifications")
}

// Заказы (связь с order-service)
model Order {
  id                String   @id @default(cuid())
  userId            String
  orderNumber       String   @unique
  status            OrderStatus
  totalAmount       Decimal  @db.Decimal(10, 2)
  currency          String   @default("RUB")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Отношения
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("orders")
}

// Доставки (связь с logistics-service)
model Delivery {
  id                String   @id @default(cuid())
  userId            String
  orderId           String
  status            DeliveryStatus
  carrierId         String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Отношения
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("deliveries")
}

// Enums
enum UserRole {
  CUSTOMER
  SELLER
  CARRIER
  ADMIN
  MODERATOR
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum DeviceType {
  MOBILE
  TABLET
  DESKTOP
  WEB
}

enum VerificationType {
  EMAIL
  PHONE
  PASSWORD_RESET
  TWO_FACTOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}
