#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI Service
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test-ai-service.py
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:3005"
DEVICE_ID = "test-device-123"

def test_health_endpoint():
    """–¢–µ—Å—Ç health endpoint"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é health endpoint...")
    
    try:
        response = requests.get(f"{BASE_URL}/health", headers={"x-device-id": DEVICE_ID})
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check —É—Å–ø–µ—à–µ–Ω: {data['status']}")
            print(f"   Service: {data['service']}")
            print(f"   Version: {data['version']}")
            print(f"   Device ID: {data['deviceId']}")
            return True
        else:
            print(f"‚ùå Health check –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ AI Service")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3005")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ health endpoint: {str(e)}")
        return False

def test_root_endpoint():
    """–¢–µ—Å—Ç root endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é root endpoint...")
    
    try:
        response = requests.get(f"{BASE_URL}/", headers={"x-device-id": DEVICE_ID})
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Root endpoint —É—Å–ø–µ—à–µ–Ω")
            print(f"   Message: {data['message']}")
            print(f"   Version: {data['version']}")
            print(f"   Available endpoints: {len(data['endpoints'])}")
            return True
        else:
            print(f"‚ùå Root endpoint –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ root endpoint: {str(e)}")
        return False

def test_recommendations_endpoint():
    """–¢–µ—Å—Ç recommendations endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é recommendations endpoint...")
    
    payload = {
        "user_id": "test-user-123",
        "search_query": "–∫–∏—Ä–ø–∏—á",
        "category": "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
        "budget": 50000.0
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/recommendations", 
            json=payload,
            headers={"x-device-id": DEVICE_ID}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Recommendations endpoint —É—Å–ø–µ—à–µ–Ω")
            print(f"   Message: {data['message']}")
            print(f"   Confidence: {data['confidence']}")
            print(f"   Recommendations count: {len(data['recommendations'])}")
            return True
        else:
            print(f"‚ùå Recommendations endpoint –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ recommendations endpoint: {str(e)}")
        return False

def test_price_prediction_endpoint():
    """–¢–µ—Å—Ç price prediction endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é price prediction endpoint...")
    
    payload = {
        "product_id": "prod-123",
        "market_data": {"demand": "high", "supply": "stable"},
        "historical_prices": [1000.0, 1100.0, 1200.0, 1150.0, 1300.0]
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/price-prediction", 
            json=payload,
            headers={"x-device-id": DEVICE_ID}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Price prediction endpoint —É—Å–ø–µ—à–µ–Ω")
            print(f"   Message: {data['message']}")
            print(f"   Predicted price: {data['predicted_price']}")
            print(f"   Confidence: {data['confidence']}")
            print(f"   Trend: {data['trend']}")
            return True
        else:
            print(f"‚ùå Price prediction endpoint –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ price prediction endpoint: {str(e)}")
        return False

def test_construction_estimate_endpoint():
    """–¢–µ—Å—Ç construction estimate endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é construction estimate endpoint...")
    
    payload = {
        "project_type": "–∂–∏–ª–æ–π –¥–æ–º",
        "area": 150.0,
        "materials": ["–∫–∏—Ä–ø–∏—á", "—Ü–µ–º–µ–Ω—Ç", "–¥–æ—Å–∫–∏"],
        "complexity": "—Å—Ä–µ–¥–Ω—è—è"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/construction-estimate", 
            json=payload,
            headers={"x-device-id": DEVICE_ID}
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Construction estimate endpoint —É—Å–ø–µ—à–µ–Ω")
            print(f"   Message: {data['message']}")
            print(f"   Total estimate: {data['total_estimate']}")
            print(f"   Labor estimate: {data['labor_estimate']}")
            print(f"   Timeline: {data['timeline_days']} –¥–Ω–µ–π")
            return True
        else:
            print(f"‚ùå Construction estimate endpoint –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ construction estimate endpoint: {str(e)}")
        return False

def test_market_analysis_endpoint():
    """–¢–µ—Å—Ç market analysis endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é market analysis endpoint...")
    
    try:
        response = requests.get(f"{BASE_URL}/market-analysis", headers={"x-device-id": DEVICE_ID})
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Market analysis endpoint —É—Å–ø–µ—à–µ–Ω")
            print(f"   Message: {data['message']}")
            print(f"   Demand trend: {data['market_trends']['demand']}")
            print(f"   Top categories: {', '.join(data['top_categories'])}")
            return True
        else:
            print(f"‚ùå Market analysis endpoint –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ market analysis endpoint: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Service TUTUU MARKET MVP")
    print("=" * 50)
    print(f"üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê Base URL: {BASE_URL}")
    print(f"üì± Device ID: {DEVICE_ID}")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        test_health_endpoint,
        test_root_endpoint,
        test_recommendations_endpoint,
        test_price_prediction_endpoint,
        test_construction_estimate_endpoint,
        test_market_analysis_endpoint
    ]
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {str(e)}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {total - passed}/{total}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("   AI Service –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞")
    
    print("=" * 50)

if __name__ == "__main__":
    main()
